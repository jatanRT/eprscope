% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readEPR_Exp_Specs.R
\name{readEPR_Exp_Specs}
\alias{readEPR_Exp_Specs}
\title{Read the EPR Experimental ASCII or other Text-Based Data}
\usage{
readEPR_Exp_Specs(
  path_to_ASC,
  sep = "auto",
  skip = 1,
  header = FALSE,
  na.strings = NULL,
  select = NULL,
  drop = NULL,
  encoding = "unknown",
  fill = FALSE,
  blank.lines.skip = FALSE,
  col.names = c("index", "B_G", "dIepr_over_dB"),
  colClasses = NULL,
  x = 2,
  x.unit = "G",
  Intensity = 3,
  time.series = NULL,
  convertB.unit = TRUE,
  qValue = NULL,
  norm.vec.add = NULL,
  origin = "xenon"
)
}
\arguments{
\item{path_to_ASC}{String, path to ASCII file/table (e.g. \code{.txt}, \code{.csv} or \code{.asc})
with spectral data (\eqn{Intensity vs B}(Field) with additional 'index' and/or 'time' variables).
The path can be also defined by \code{\link[base]{file.path}}.}

\item{sep}{Character/String inherited from \code{\link[data.table]{fread}}, separator between columns,
like \code{","},\code{"\t"}...etc \strong{default}: \code{sep = "auto"}.}

\item{skip}{Number, inherited from \code{\link[data.table]{fread}}, representing the number of ASCII data rows
which do not contain data/rows or columns names. It automatically avoids irregular header information
before the column names row/line, \strong{default}: \code{skip = 1}.}

\item{header}{Character/String or Logical, inherited from \code{\link[data.table]{fread}}...TBC}

\item{na.strings}{Character vector, inherited from \code{\link[data.table]{fread}}...TBC}

\item{select}{Character or numeric vector, inherited from \code{\link[data.table]{fread}}...TBC if \code{header = TRUE}.}

\item{drop}{Character or numeric vector, inherited from \code{\link[data.table]{fread}}...TBC if \code{header = TRUE}.}

\item{encoding}{Character/String, inherited from \code{\link[data.table]{fread}}...TBC}

\item{fill}{Logical, inherited from \code{\link[data.table]{fread}}...TBC}

\item{blank.lines.skip}{Logical, inherited from \code{\link[data.table]{fread}}...TBC}

\item{col.names}{Character/String vector, inherited from \code{\link[data.table]{fread}}, corresponding to
column/variable names. A safe rule of thumb is to use column names incl. physical quantity notation
with its units, \code{Quantity_Unit} like \code{"B_G"}, \code{"RF_MHz"}, \code{"Bsim_mT"} (e.g. pointing
to simulated EPR spectrum abscissa)...etc, \strong{default}: \code{col.names = c("index","B_G",dIepr_over_dB)}.
The default (for original \code{\link[data.table]{fread}}) is to use the header column if present or detected,
or if not `"V"` followed by the column number.}

\item{colClasses}{List, inherited from \code{\link[data.table]{fread}}... TBC
e.g. like \code{colClasses = list(numeric = 1)} or by character string like \code{colClasses = c(V1 = "numeric")}
or \code{colClasses = list(numeric = "V1")} where in all cases `1` corresponds, to column index.
\strong{Default}: \code{colClasses = NULL}.}

\item{x}{Numeric index related to \code{col.names} pointing to independent variable, which corresponds
to abscissa (\eqn{x}-axis) in spectra or other plots.}

\item{x.unit}{Character/String ...TBC}

\item{Intensity}{Numeric index related to \code{col.names} pointing to `general` intensity,
like derivative intensity (`dIepr_over_dB`), integral one (e.g. `single_Integ`), double or sigmoid
integral (e.g. `Area`)...etc. This corresponds to column/vector which should be presented like
\eqn{y}-axis in spectra or other plots.}

\item{time.series}{Numeric index related to \code{col.names} pointing to `time` column for time series
EPR spectra changing upon time. If data contains simple relationship like \eqn{Area} vs \eqn{time}
use \code{x} and \code{x.unit} parameters/arguments instead. This parameter/argument is dedicated
to kinetic-like experiments. \strong{Default}: \code{time.series = NULL}.}

\item{convertB.unit}{Logical (\strong{default}: \code{convertB.unit = TRUE}) description...
convert \eqn{B} in Gauss <=> millitesla...}

\item{qValue}{Numeric, Q value (quality factor, number) displayed at specific \code{dB} by spectrometer,
in case of ` "Xenon" ` software the parameter is included in \code{.DSC} file, \strong{default}:
\code{qValue = NULL}}

\item{norm.vec.add}{Numeric vector. Additional normalization constant in form of vector involving
all additional (in addition to \code{qValue}) normalization(s) like e.g. concentration, powder sample
weight, number of scans, ...etc (\code{norm.vec.add = c(2000,0.5,2)}). \strong{Default}:
\code{norm.vec.add = NULL}.}

\item{origin}{String/Character corresponding to \strong{origin} of the ASCII data, like from
most common spectrometers (from which are data loaded automatically using the default parameters).
Options are summarized in the following table (Any other specific `origin` may be added later) =>
\tabular{rl}{
\strong{String} \tab \strong{Description} \cr
"xenon" \tab \strong{default} automatically loads data from `Xenon` software with dafault params. \cr
"winepr" \tab automatically loads data from `WinEpr` software \cr
"other" (arbitrary string) \tab general, loads any other `origin` data ( like `csv`, `txt`, `asc`) incl.
data from other instrumental/spectrometer software. \strong{In such case all the parameters/arguments for}
\code{readEPR_Exp_Specs} \strong{have to be set up accordingly}.
}}
}
\value{
Data frame/table consisting of the unitless \code{g-factor} or the magnetic flux density
  column \code{B_mT} in millitesla (as well as \code{B_G} in gauss) or \code{RF_MHz}
  (in case of ENDOR spectrum) and the derivative intensity column (\code{dIepr_over_dB})
  or any other intensities (like in integrated spectral form) in \code{procedure defined unit}
  (see \href{http://www.iupac.org/divisions/VII/VII.C.1/C-NPU_Uppsala_081023_25_minutes_confirmed.pdf}{p.d.u.}),
  which is normalized by the above-described parameters and finally the \code{index} and/or a \code{time}
  (in the case of time series experiment) columns are displayed as well.
}
\description{
The function is based on \code{\link[data.table]{fread}} with the purpose to read
  experimental EPR/ENDOR spectra or other original related (preprocessed) data from EPR spectrometers
  in ASCII format (e.g. like \code{.txt}, \code{.csv} or \code{.asc}) and transforms it into \code{data frame},
  which can be easily processed by other R packages (e.g. by \pkg{tidyverse} system), afterwards.
  Spectral data (intensities) are normalized by the common experimental parameters like Q-factor, concentration...etc.
  ASCII files/tables depend on the origin/software used to acquire the EPR spectra. This is mirrored by \code{origin}
  parameter. Time series (time evolution of EPR spectra) can be read by the \code{time.series} parameter.
}
\examples{
\dontrun{
## simple EPR spectrum acquired by "xenon"
## and with `B` conversion "G" <=> mT
readEPR_Exp_Specs(path_to_ASC,
                  qValue = 3500)

## simple EPR spectrum acquired by "xenon"
## and without `B` conversion "G" <=> mT
readEPR_Exp_Specs(path_to_ASC,
                  convertB.unit = FALSE,
                  qValue = 3500)

## for the simple spectrum acquired by "winepr"
## (and 20 scans) on a 10 mg powder sample:
readEPR_Exp_Specs(path_to_ASC,
                  col.names = c("B_G","dIepr_over_dB"),
                  x = 1,
                  Intensity = 2,
                  qValue = 2000,
                  norm.vec.add = c(20,10),
                  origin = "winepr")

## EPR time series acquired by "winepr"
readEPR_Exp_Specs(path_to_ASC,
                  col.names = c("B_G",
                                "Slice",
                                "dIepr_over_dB"),
                  x = 1,
                  Intensity = 3,
                  time.series = 2,
                  origin = "winepr")

## if no parameter intensity normalization
## is required and a simple spectrum
## was recorded by "xenon" software:
readEPR_Exp_Specs(path_to_ASC = file.path(".",
                                          "ASCII_Folder",
                                          "EPR_spectrum.txt"))

## for the ENDOR spectrum recorded by "xenon"
## by 40 accumulation sweeps
readEPR_Exp_Specs("./Data/ENDOR_spectrum.txt",
                  col.names = c("index",
                                "RF_MHz",
                                "dIepr_over_dB"),
                  x = 2,
                  x.unit = "MHz",
                  Intensity = 3,
                  norm.vec.add = 40)

## example for "xenon" time series experiment
## (evolution of EPR spectra in time, e.g. in case of
## EPR spectroelectrochemistry or photochemistry):
## together with `B` conversion "G" <=> mT
## and intensity normalized against `qValue`
readEPR_Exp_Specs(path_to_ASC,
                  col.names = c("index",
                                "B_G",
                                "time_s",
                                "dIepr_over_dB"),
                  x = 2,
                  Intensity = 4,
                  qValue = 2800,
                  time.series = 3)

## reading simple spectrum from the new "magnettech"
## acquisition software
readEPR_Exp_Specs("./Data/EPR_spectrum.csv",
                  skip = 88,
                  col.names = c("B_mT","dIepr_over_dB"),
                  x = 1,
                  x.unit = "mT",
                  Intensity = 2,
                  origin = "magnettech")

## reading file data from (and pre-processed) by "xenon" software
## corresponding to kinetics where `Area` and `time` are
## data columns, however there are many columns and one should
## select only the two mentioned above + normalize `Area`
## against the `qValue`
readEPR_Exp_Specs("./EPR_ASCII/Quant_kinet_a.txt",
                  header = T,
                  fill = T,
                  select = c(3,7),
                  col.names = c("time_s","Area"),
                  x.unit = "s",
                  x = 1,
                  Intensity = 2,
                  qValue = 1700)
}


}
\seealso{
Other Data Reading: 
\code{\link{readEPR_Exp_Specs_kin}()},
\code{\link{readEPR_Exp_Specs_multif}()},
\code{\link{readEPR_Sim_Spec}()},
\code{\link{readEPR_param_slct}()},
\code{\link{readEPR_params_slct_kin}()},
\code{\link{readEPR_params_slct_quant}()},
\code{\link{readEPR_params_slct_sim}()},
\code{\link{readEPR_params_tabs}()},
\code{\link{readEPR_solvent_props}()},
\code{\link{readMAT_params_file}()}
}
\concept{Data Reading}
