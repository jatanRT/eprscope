% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readEPR_Exp_Specs_multif.R
\name{readEPR_Exp_Specs_multif}
\alias{readEPR_Exp_Specs_multif}
\title{Load Several/Multiple EPR Spectral Data Files with Parameters}
\usage{
readEPR_Exp_Specs_multif(
  pattern,
  dir_ASC,
  dir_DSC_or_par,
  x.unit = "G",
  col.names = c("index", "B_G", "dIepr_over_dB"),
  origin = "xenon",
  qValues = NULL,
  names,
  tidy = FALSE,
  var2nd = NULL
)
}
\arguments{
\item{pattern}{String/Character, inherited from \code{\link[base]{list.files}}, which appear in the file name
as a 'specimen'.}

\item{dir_ASC}{path (defined by \code{\link[base]{file.path}}, String/Character) to directory where
the `ascii` files are stored}

\item{dir_DSC_or_par}{path (defined by \code{\link[base]{file.path}} String/Character) to directory
where the files (`.DSC` or `.par`) with instrumental parameters (to calculate \eqn{g}-value
or normalize intensities) are stored}

\item{x.unit}{Character/String pointing to unit of quantity (coming from original ASCII data, see also
\code{column.names} parameter) which is to be presented on \eqn{x} abscissa of the EPR spectrum,
like \code{"G"} (`Gauss`), \code{"mT"} (`millitesla`), \code{"MHz"} (`megahertz` in case of ENDOR spectra)
or \code{"Unitless"} in case of \eqn{g}-values, \strong{default}: \code{x.unit = "G"}.}

\item{col.names}{Character/String vector, inherited from \code{\link[data.table]{fread}}, corresponding to
column/variable names \strong{for individual file} (see also \code{\link{readEPR_Exp_Specs}}).
A safe rule of thumb is to use column names incl. physical quantity notation with its units,
\code{Quantity_Unit} like \code{"B_G"}, \code{"RF_MHz"}, \code{"Bsim_mT"} (e.g. pointing
to simulated EPR spectrum abscissa)...etc, \strong{default}: \code{col.names = c("index","B_G",dIepr_over_dB)}.}

\item{origin}{String/Character corresponding to \strong{software} used to acquire the EPR spectra
on BRUKER spectrometers, i.e. whether they were recorded by the windows based softw. ("WinEpr",
\code{origin = "winepr"}) or by the Linux one ("Xenon"), \strong{default}: \code{origin = "xenon"}
Only the two above-mentioned  characters/strings are available due to reading parameter files.}

\item{qValues}{Numeric Vector, `Q Value` (sensitivity factors to normalize EPR intensity) either loaded from
files incl. parameters (`.DSC` or `.par`) by this function/R.script (therefore \code{qValues = NULL},
\strong{default}) or in case of \code{origin = "winepr"} it have to provided by the operator of a spectrometer}

\item{names}{String/Character Vector corresponding to values of \strong{additional quantity}
(e.g. temperature,microwave power...etc) being varied by the individual experiments}

\item{tidy}{Boolean, whether to transform the list of data frames into long table (`tidy`) format,
\strong{default}: \code{tidy = F}}

\item{var2nd}{String/Character, if \code{tidy = T} (see `tidy` parameter) it is referred to name
of the variable/quantity (e.g. like `time`,`Temperature`,`Electrochemical Potential`,`Microwave Power`...etc)
altered upon individual experiments as a second variable (\code{var2nd}) and related to spectra/data.}
}
\value{
List of Data Frames (or `long table` format) corresponding to multiple spectral data files/database
}
\description{
Loads EPR spectra from several/multiple `ASCII`/`text` files and from those incl. instrumental
 parameters (`DSC` or `par`) at once and transforms it into a database list of data frames. Function is based
 on the \code{\link[base]{list.files}} and \code{\link{readEPR_Exp_Specs}} into one list/database.
 According to  experiment quantity (e.g. temperature,microwave power,recording time...etc),
 `names` and `var2nd` (in case of `tidy = T`) parameters have to be provided. If intensity normalization
 by e.g. like concentration, sample weight...etc is required, it can be performed afterwards
 (generally, except the Q values, it is not included in the transformation process).
}
\examples{
\dontrun{
## Multiple ENDOR spectra recorded by "Xenon" software
## reading and transforming into `longtable`
readEPR_Exp_Specs_multif("Sample_VT_",
                         file.path(".","ASCII_data_dir"),
                         file.path(".","DSC_data_dir"),
                         x.unit = "MHz",
                         col.names = c("index",
                                       "RF_MHz",
                                       "Intensity")
                         names = c("210","220","230","240"),
                         tidy = T,
                         var2nd = "Temperature_K")

## Multiple EPR spectra recorded by "WinEPR" sofware
readEPR_Exp_Specs_multif("Sample_VT_",
                         file.path(".","ASCII_data_dir"),
                         file.path(".","DSC_data_dir"),
                         col.names = c("B_G","dIepr_over_dB"),
                         origin = "winepr",
                         names = c("210","220","230","240"),
                         qValues =c(3400,3501,3600,2800))
}


}
