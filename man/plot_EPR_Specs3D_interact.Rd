% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_EPR_Specs3D_interact.R
\name{plot_EPR_Specs3D_interact}
\alias{plot_EPR_Specs3D_interact}
\title{Interactive 3D Surface and 2D Contour Plots for the Series of EPR Spectra}
\usage{
plot_EPR_Specs3D_interact(
  data.spectra.series,
  x = "B_mT",
  Intensity = "dIepr_over_dB",
  var2nd.series = "time_s",
  plot.type = "surface",
  scheme.color = "Viridis",
  contour.labels = FALSE,
  xlim = NULL,
  xlab = "<i>B</i> (mT)",
  ylab = "<i>Time</i> (s)",
  zlab = "d <i>I</i><sub>EPR</sub> / d <i>B</i> (p.d.u.)",
  axis.title.size = 12,
  axis.text.size = 11,
  bg.x.color = "rgb(220, 220,220)",
  grid.x.color = "rgb(255, 255, 255)",
  bg.y.color = "rgb(220, 220,220)",
  grid.y.color = "rgb(255, 255, 255)",
  bg.z.color = "rgb(220, 220,220)",
  grid.z.color = "rgb(255, 255, 255)",
  output.matrix.df = FALSE
)
}
\arguments{
\item{data.spectra.series}{tbc}

\item{x}{Character string pointing to \code{x}-axis/column quantity in original \code{data.spectrum} like
magnetic flux density \eqn{B}, \eqn{Field}, \eqn{g}-Value or \eqn{RF} (radio frequency),
\strong{default}: \code{x = "B_mT"}.}

\item{Intensity}{Character string corresponding to intensity column in the original \code{data.spectrum}
if other than \code{dIepr_over_dB} name/label is used (e.g. for integrated or simulated spectra),
\strong{default}: \code{Intesity = "dIepr_over_dB"}.}

\item{var2nd.series}{String/Character referred to name of the second independent variable/quantity
column in the original \code{data.spectra} (such as `time`,`Temperature`, `Electrochemical Potential`,
`Microwave Power`...etc) altered upon individual experiments as a second variable
(\code{var2nd.series}) and related to spectra/data. Data must be available in \strong{long table}
(or \strong{tidy}) \strong{format} (see also \code{\link{readEPR_Exp_Specs_multif}}).
\strong{Default}: \code{var2nd.series = NULL}. Otherwise \strong{usually} \code{var2nd.series = "time_s"}.}

\item{plot.type}{Character/String, inherited from \code{\link[plotly]{plot_ly}}, specifying the trace. Only two
character/strings are available: \code{plot.type = "surface"} (\strong{default}, for 3D surface plots)
or \code{plot.type = "contour"} (for 2D contour plots).}

\item{scheme.color}{Character/String corresponding to \code{colorscale}.
See also \href{https://plotly.com/r/reference/surface/#surface}{R>Figure Reference>surface Traces}
or \href{https://plotly.com/r/reference/contour/#contour}{R>Figure Reference>contour Traces} and parameter `colorscales`.
The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv,
or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example,
`[[0, 'rgb(0,0,255)']`, `[1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space,
use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list:
\code{"Blackbody"},\code{"Bluered"},\code{"Blues"},\code{"Cividis"},\code{"Earth"},\code{"Electric"},\code{"Greens"},
\code{"Greys"},\code{"Hot"},\code{"Jet"},\code{"Picnic"},\code{"Portland"},\code{"Rainbow"},\code{"RdBu"},\code{"Reds"},
\code{"Viridis"},\code{"YlGnBu"},\code{"YlOrRd"}. \strong{Default}: \code{scheme.color = "Viridis"}}

\item{contour.labels}{tbc}

\item{xlim}{Numeric vector...if NULL => entire range}

\item{xlab}{tbc}

\item{ylab}{tbc}

\item{zlab}{tbc}

\item{axis.title.size}{Numeric, text size (in \code{px}) for the axes title,
\strong{default}: \code{axis.title.size = 15}.}

\item{axis.text.size}{Numeric, text size (in \code{px}) for the axes unit values/descriptions,
\strong{default}: \code{axis.text.size = 14}.}

\item{bg.x.color}{tbc}

\item{grid.x.color}{tbc}

\item{bg.y.color}{tbc}

\item{grid.y.color}{tbc}

\item{bg.z.color}{tbc}

\item{grid.z.color}{tbc}

\item{output.matrix.df}{tbc}
}
\value{
tbc
}
\description{
tbc, something...
}
\examples{
## loading the built-in package example to demonstrate
## visualizatioin of time series EPR spectra:
triarylamine.decay.series.dsc.path <-
load_data_example(file =
        "Triarylamine_radCat_decay_series.DSC")
triarylamine.decay.series.asc.path <-
load_data_example(file =
        "Triarylamine_radCat_decay_series.zip")
unzip(triarylamine.decay.series.asc.path,
      exdir = tempdir()
      )
## loading the kinetics:
triarylamine.decay.series.data <-
  readEPR_Exp_Specs_kin(name.root =
                          "Triarylamine_radCat_decay_series",
                        dir_ASC = tempdir(),
                        dir_dsc_par =
                          system.file("extdata",
                                      package = "eprscope")
                        )
#
## plot basics `surface` plot (with default arguments)
## and the `Jet` color scheme including
## Intensity contour labels
plot_EPR_Specs3D_interact(triarylamine.decay.series.data$df,
  contour.labels = TRUE,
  scheme.color = "Jet")
#
## plot basic `contour` plot (with default arguments)
plot_EPR_Specs3D_interact(triarylamine.decay.series.data$df,
  plot.type = "contour")
#
\dontrun{
## 3D surface plotting EPR spectra series (in the region
## of <334,345> mT) from variable temperature
## (VT) experiments
plot_EPR_Specs3D_interact(data.spectra.series,
  var2nd.series = "Temperature_K",
  xlim = c(334,345),
  contour.labels = T,
  ylab = "<i>Temperature</i> (K)")
}


}
\seealso{
Other Visualizations and Graphics: 
\code{\link{draw_molecule_by_rcdk}()},
\code{\link{plot_EPR_Specs}()},
\code{\link{plot_EPR_Specs2D_interact}()},
\code{\link{plot_EPR_Specs_integ}()},
\code{\link{plot_EPR_present_interact}()},
\code{\link{plot_labels_xyz}()},
\code{\link{plot_layout2D_interact}()},
\code{\link{plot_theme_In_ticks}()},
\code{\link{plot_theme_NoY_ticks}()},
\code{\link{plot_theme_Out_ticks}()},
\code{\link{present_EPR_Sim_Spec}()}
}
\concept{Visualizations and Graphics}
