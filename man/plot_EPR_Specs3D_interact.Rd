% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_EPR_Specs3D_interact.R
\name{plot_EPR_Specs3D_interact}
\alias{plot_EPR_Specs3D_interact}
\title{Interactive 3D Surface and 2D Contour Plots for the Series of EPR Spectra}
\usage{
plot_EPR_Specs3D_interact(
  data.spectra.series,
  x = "B_mT",
  Intensity = "dIepr_over_dB",
  var2nd.series = "time_s",
  plot.type = "surface",
  scheme.color = "Viridis",
  contour.labels = FALSE,
  xlim = NULL,
  xlab = "<i>B</i> (mT)",
  ylab = "<i>Time</i> (s)",
  zlab = "d <i>I</i><sub>EPR</sub> / d <i>B</i> (p.d.u.)",
  axis.title.size = 12,
  axis.text.size = 11,
  bg.x.color = "rgb(220, 220,220)",
  grid.x.color = "rgb(255, 255, 255)",
  bg.y.color = "rgb(220, 220,220)",
  grid.y.color = "rgb(255, 255, 255)",
  bg.z.color = "rgb(220, 220,220)",
  grid.z.color = "rgb(255, 255, 255)",
  output.matrix.df = FALSE
)
}
\arguments{
\item{data.spectra.series}{Spectrum data frame/table object containing magnetic flux density, \eqn{g}-value
or radio-frequency columns as \code{x} variable. They can be labeled as \code{Field}, \code{B_mT}
in mT (or \code{B_G} in gauss), see also \code{x} parameter/argument. The \code{y/Intensity} variable
can be labeled as \code{dIepr_over_dB}, in case of derivative intensity, or if
integrated or simulated spectral intensities are present, they can be labeled accordingly.
See also \code{Intensity} parameter/argument. A second independent variable
\code{var2nd.series} column (e.g. \code{var2nd.series = "time_s"}) must be available. In such case,
the entire \code{data.spectra} must be present in the form of
\href{https://r4ds.had.co.nz/tidy-data.html}{tidy/long table format}
(see also parameter/argument \code{var2nd.series}).}

\item{x}{Character string pointing to \eqn{x}-axis/column quantity in the original \code{data.spectrum} like
magnetic flux density \eqn{B}, \eqn{Field}, \eqn{g}-Value or \eqn{RF} (radio frequency),
\strong{default}: \code{x = "B_mT"}.}

\item{Intensity}{Character string corresponding to the intensity column header in the original \code{data.spectrum}
if other than \code{dIepr_over_dB} name/label is used (e.g. for integrated or simulated spectra),
\strong{default}: \code{Intesity = "dIepr_over_dB"}.}

\item{var2nd.series}{Character string referred to name of the second independent variable/quantity
column in the original \code{data.spectra} (such as time, Temperature, Electrochemical Potential,
Microwave Power...etc) altered upon individual experiments. Data must be available in \strong{long table}
(or \strong{tidy}) \strong{format} (see also \code{data.spectra.series} argument).
\strong{Default}: \code{var2nd.series = NULL}. Otherwise, usually, \code{var2nd.series = "time_s"}.}

\item{plot.type}{Character string, inherited from \code{\link[plotly]{plot_ly}}, specifying the trace. Only two
character strings are available: \code{plot.type = "surface"} (\strong{default}, for 3D surface plots)
or \code{plot.type = "contour"} (for 2D contour plots).}

\item{scheme.color}{Character/String corresponding to \code{color scale}.
See also \href{https://plot.ly/r/reference/#surface-colorscale}{surface-colorscale}.
Color scale must be an array containing arrays mapping a normalized value to an RGB, RGBa, HEX, HSL, HSV,
or named color string. At minimum, a mapping for the lowest (0) and the highest (1) values are required.
For example, \code{[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]} or as a list:
\code{list(c(0, 1), c("tan", "blue"))} or \code{list(c(0, "tan"), c(1, "blue"))}. To control the bounds of the color
scale in the corresponding space, use \code{cmin} and \code{cmax}. Alternatively, \code{color scale}
may be a palette name string of the following list: \code{"Blackbody"},\code{"Bluered"},\code{"Blues"},
\code{"Cividis"},\code{"Earth"},\code{"Electric"},\code{"Greens"},\code{"Greys"},\code{"Hot"},
\code{"Jet"},\code{"Picnic"},\code{"Portland"},\code{"Rainbow"},\code{"RdBu"},\code{"Reds"},
\code{"Viridis"},\code{"YlGnBu"},\code{"YlOrRd"}. \strong{Default}: \code{scheme.color = "Viridis"}.}

\item{contour.labels}{Logical, whether contours of intensity "hills" and "valleys" are projected
onto the \eqn{x,y}-plane. \strong{Default}: \code{contour.labels = FALSE}.}

\item{xlim}{Numeric vector pointing to lower and upper limit of the \eqn{x}-axis range.
Assignment of \code{xlim = NULL} (\strong{default}) actually corresponds to the entire original
range (see also the \code{data.spectra.series} argument).}

\item{xlab}{Character string \eqn{\equiv} title of the \eqn{x}-axis. Either simple, like
\code{xlab = "B (mT)"} can be applied or if additional formatting is required,
the \href{https://www.w3schools.com/html/html_formatting.asp}{\code{html} markup language} is used,
such as \code{xlab = "<i>B</i> (mT)"} (\strong{default}). If a \eqn{\LaTeX} typesetting
is required for the title, please refer to e.g. \href{https://plotly.com/r/LaTeX/}{LaTeX Plotly Tepesetting}.}

\item{ylab}{Character string \eqn{\equiv} title of the \eqn{y}-axis (see also \code{xlab}), \strong{default}:
\code{ylab = "<i>Time</i> (s)"}.}

\item{zlab}{Character string \eqn{\equiv} title of the \eqn{z}-axis (see also \code{xlab}), \strong{default}:
\code{zlab = "d <i>I</i><sub>EPR</sub> / d <i>B</i> (p.d.u.)"}.}

\item{axis.title.size}{Numeric, text size (in \code{px}) for the axes title,
\strong{default}: \code{axis.title.size = 15}.}

\item{axis.text.size}{Numeric, text size (in \code{px}) for the axes unit values/descriptions,
\strong{default}: \code{axis.text.size = 14}.}

\item{bg.x.color}{Character string, setting the background color of the \eqn{x}-axis wall.
\strong{Default}: \code{bg.x.color = "rgb(220, 220,220)"} (light gray). For additional color
definitions, consult \href{https://www.w3.org/TR/css-color-3/}{CSS Color Module Homepage}.}

\item{grid.x.color}{Character string, pointing to color of \eqn{x}-axis grid lines,
\strong{default}: \code{grid.x.color = "rgb(255, 255, 255)"} (white). For additional color
definitions, consult \href{https://www.w3.org/TR/css-color-3/}{CSS Color Module Homepage}.}

\item{bg.y.color}{Character string, setting the background color of the \eqn{y}-axis wall (see also \code{bg.x.color}),
\strong{default}: \code{bg.y.color = "rgb(220, 220,220)"} (light gray).}

\item{grid.y.color}{Character string, pointing to color of \eqn{y}-axis grid lines,
\strong{default}: \code{grid.y.color = "rgb(255, 255, 255)"} (white).}

\item{bg.z.color}{Character string, setting the background color of the \eqn{z}-axis wall (see also \code{bg.x.color}),
\strong{default}: \code{bg.z.color = "rgb(220, 220,220)"} (light gray).}

\item{grid.z.color}{Character string, pointing to color of \eqn{z}-axis grid lines,
\strong{default}: \code{grid.z.color = "rgb(255, 255, 255)"} (white).}

\item{output.matrix.df}{Logical, if \code{output.matrix.df = TRUE} a wide data frame format,
 with all spectral/integral intensities and within the (time, Temperature,...etc.) series,
represented by individual columns/variables, is returned.
\strong{Default}: \code{output.matrix.df = FALSE}.}
}
\value{
Depending on \code{output.matrix.df}, function returns either interactive plot object
  (\code{output.matrix.df = FALSE}) or if \code{otput.matrix.df = TRUE}, it results in the list
  consisting of
  \describe{
  \item{plot}{Interactive object plot (see below).}
  \item{df}{Associated data fame object in wide table format for subsequent processing by other graphing
  software programs. It can be also quite easily transformed into the long/tidy format by the \code{\link[tidyr]{pivot_longer}}.}
  }
  In both cases the interactive plot can be visualized either in 3D surface mode (\code{plot.type = "surface"})
  or in 2D contour mode with the intensity scale mapped onto the color bar (\code{plot.type = "contour"}).
}
\description{
Interactive plotting of EPR spectra or their integrals based on \href{https://plotly.com/r/}{plotly} package.
  The aim of this function is to nicely visualize the series of EPR spectra (or their corresponding integrals),
  while checking out the EPR intensities upon e.g. kinetic (time series), variable temperature or simultaneous
  spectroelectrochemical experiments (potential series). For such purpose, the data frame input
  (see \code{data.spectra.series} argument) is transformed into the \code{matrix} (with columns/variables corresponding
  to intensities at defined times, potentials, temperatures...etc.). In the next step the \code{\link[plotly]{plot_ly}}
  function generates either \strong{3D surface} or \strong{2D contour} plot objects which are finally customized
  by the \code{\link[plotly]{layout}} as well as by the \code{\link[plotly]{colorbar}}. Similarly, as for
  the \code{\link{plot_EPR_Specs2D_interact}} final plots can be stored or attached to a certain document format,
  using the \code{\link{plot_EPR_present_interact}} function (or directly within Rstudio), as \code{.png} or \code{.html}.
}
\examples{
## loading the built-in package example to demonstrate
## visualizatioin of time series EPR spectra:
triarylamine.decay.series.dsc.path <-
load_data_example(file =
        "Triarylamine_radCat_decay_series.DSC")
triarylamine.decay.series.asc.path <-
load_data_example(file =
        "Triarylamine_radCat_decay_series.zip")
unzip(triarylamine.decay.series.asc.path,
      exdir = tempdir()
      )
## loading the kinetics:
triarylamine.decay.series.data <-
  readEPR_Exp_Specs_kin(name.root =
                          "Triarylamine_radCat_decay_series",
                        dir_ASC = tempdir(),
                        dir_dsc_par =
                          system.file("extdata",
                                      package = "eprscope")
                        )
#
## plot basics `surface` plot (with default arguments)
## and the `Jet` color scheme including
## Intensity contour labels
plot_EPR_Specs3D_interact(triarylamine.decay.series.data$df,
  contour.labels = TRUE,
  scheme.color = "Jet")
#
## plot basic `contour` plot (with default arguments)
plot_EPR_Specs3D_interact(triarylamine.decay.series.data$df,
  plot.type = "contour")
#
\dontrun{
## 3D surface plotting EPR spectra series (in the region
## of <334,345> mT) from variable temperature
## (VT) experiments
plot_EPR_Specs3D_interact(data.spectra.series,
  var2nd.series = "Temperature_K",
  xlim = c(334,345),
  contour.labels = T,
  ylab = "<i>Temperature</i> (K)")
}


}
\seealso{
Other Visualizations and Graphics: 
\code{\link{draw_molecule_by_rcdk}()},
\code{\link{plot_EPR_Specs}()},
\code{\link{plot_EPR_Specs2D_interact}()},
\code{\link{plot_EPR_Specs_integ}()},
\code{\link{plot_EPR_present_interact}()},
\code{\link{plot_labels_xyz}()},
\code{\link{plot_layout2D_interact}()},
\code{\link{plot_theme_In_ticks}()},
\code{\link{plot_theme_NoY_ticks}()},
\code{\link{plot_theme_Out_ticks}()},
\code{\link{present_EPR_Sim_Spec}()}
}
\concept{Visualizations and Graphics}
