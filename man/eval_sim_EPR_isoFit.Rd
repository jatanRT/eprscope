% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_sim_EPR_isoFit.R
\name{eval_sim_EPR_isoFit}
\alias{eval_sim_EPR_isoFit}
\title{Least-Squares Fitting of Isotropic EPR spectra by Simulations}
\usage{
eval_sim_EPR_isoFit(
  data.spectr.expr,
  Intensity.expr = "dIepr_over_dB",
  Intensity.sim = "dIeprSim_over_dB",
  nu.GHz,
  B.unit = "G",
  nuclear.system.noA,
  lineG.content = 0.5,
  lineSpecs.form = "derivative",
  optim.method = "neldermead",
  optim.params.init,
  optim.params.lower = NULL,
  optim.params.upper = NULL,
  Nmax.evals = 1000,
  tol.step = 1e-06,
  pswarm.size = NULL,
  pswarm.diameter = NULL,
  sim.check = TRUE
)
}
\arguments{
\item{data.spectr.expr}{Data frame object ... TBC ...}

\item{Intensity.expr}{Character string ... TBC ...}

\item{Intensity.sim}{Character string ... TBC ...}

\item{nu.GHz}{Numeric value, microwave frequency in `GHz`.}

\item{B.unit}{Character string denoting the magnetic flux density unit e.g. \code{B.unit = "G"}
(gauss, \strong{default}) or \code{B.unit = "mT"} (millitesla). These are the usual units used
for EPR spectra.}

\item{nuclear.system.noA}{List or nested list ... TBC ... without estimated hyperfine coupling constant values}

\item{lineG.content}{Numeric value ...}

\item{lineSpecs.form}{Character string ...}

\item{optim.method}{Character string ... TBC ...}

\item{optim.params.init}{Numeric vector with estimated ... TBC ...1. element = g-value, 2. element = Gaussian
linewidth, 3. element = Lorentzian linewidth, 4. element = baseline constant, 5. element Intensity
multiplication constant and 6, 7... elements hyperfine coupling constants in `MHz`}

\item{optim.params.lower}{Numeric vector (with the length of \code{optim.params.init}) with the lower bound constraints.}

\item{optim.params.upper}{Numeric vector (with the length of \code{optim.params.init}) with the upper bound constraints.}

\item{Nmax.evals}{Numeric value corresp. to maximum number of iterations/evaluations.}

\item{tol.step}{Numeric value describing the smallest optimization step (tolerance) to stop the optimization.}

\item{pswarm.size}{Numeric value equal to particle swarm size (i. e. number of particles).}

\item{pswarm.diameter}{Numeric value corresponding to diameter of search space.}

\item{sim.check}{Logical, whether to return simple list with overlay plot and the best fitting parameters in a vector.}
}
\value{
List with following components depending on \code{sim.check} ... TBC ...
}
\description{
A short description...
}
\details{
Additional details...
}
\examples{
\dontrun{
## fitting of the simulated TMPD radical cation spectrum
## on the experimental one (see also `Introduction` vignette)
## 1. loading the built-in data
tempo.data.path <- load_data_example(file = "TMPD_specelchem_accu_b.asc")
tempo.data <- readEPR_Exp_Specs(tempo.data.path,
                               col.names = c("B_G","dIepr_over_dB"),
                               x = 1,
                               Intensity = 2,
                               qValue = 3500,
                               origin = "winepr")
## 2. TMPD EPR spectrum may be simulated with the following hyperfine
## coupling constants coming from
## (see also https://doi.org/10.1007/s00706-004-0224-4) =>
## A (2 x 14N) = `19.75` MHz, A (4 x 1H) = `5.58` MHz
## and A (12 x 1H) = `18.97` MHz with the additional Gaussian
## and Lorentzian linewidth `0.6` G and `0.6` G, respectively.
## Baseline was estimated by the constant with the initial `0` value
## and the initial multiplication factor for the intensity was `3`.
## The initial g-value was estimated from the spectrum, g = `2.0031`.
tmpd.test.sim.fit <-
eval_sim_EPR_isoFit(data.spectr.expr = tmpd.data,
                    nu.GHz = 9.814155,
                    nuclear.system.noA = list(list("14N",2),
                                              list("1H",4),
                                              list("1H",12)),
                    optim.params.init = c(2.0031,0.6,0.6,0,3,19.75,5.58,18.97))
## Such evaluation by "Nelder-Mead" optimization method returns list consisting
## of plot with both experimental and simulated spectra (+ displaying residuals)
## and/or the best fitting paramaters (if `sim.check = TRUE` which is by default)
tmpd.test.sim.fit$plot
## and
tmpd.test.sim$best.fit.params
## respectively. In such case the following best parameters
## for the spectrum fit were found =>
## c(2.00305,0.543,0.489,-1.065e-5,0.992,19.538,5.461,19.544)
## If additional optimization/fitting parameters are required
## (`sim.check = FALSE`) =>
tmpd.test.sim.fit <-
eval_sim_EPR_isoFit(data.spectr.expr = tmpd.data,
                    nu.GHz = 9.814155,
                    nuclear.system.noA = list(list("14N",2),
                                              list("1H",4),
                                              list("1H",12)),
                    optim.params.init = c(2.0031,0.6,0.6,0,3,19.75,5.58,18.97),
                    sim.check = FALSE)
## returns the following list =>
tmpd.test.sim.fit$plot ## publication ready plot (both spectra are not overlayed)
tmpd.test.sim.fit$best.fit.params ## the same like before
tmpd.test.sim.fit$df ## data frame in wide-format with sim., expr. + resids. spectra
tmpd.test.sim.fit$sum.LSQ.min ## min. sum of residual squares
tmpd.test.sim.fit$N.evals ## number of evaluations/iterations
tmpd.test.sim.fit$N.converg ## "convergence" integer indicating successful (> 0)
## completion
}


}
\seealso{
Other Simulations and Optimization: 
\code{\link{eval_sim_EPR_iso_combo}()},
\code{\link{eval_sim_EPR_iso}()},
\code{\link{optim_for_EPR_fitness}()},
\code{\link{quantify_EPR_Sim_series}()}
}
\concept{Simulations and Optimization}
