% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_EPR_Specs.R
\name{plot_EPR_Specs}
\alias{plot_EPR_Specs}
\title{Essential Plotting of EPR/ENDOR Spectrum/Spectra}
\usage{
plot_EPR_Specs(
  data.spectra,
  x = "B_mT",
  x.unit = "mT",
  xlim = NULL,
  var2nd = NULL,
  Intensity = "dIepr_over_dB",
  line.colors = "steelblue",
  line.width = 0.75,
  border.line.width = 0.5,
  border.line.color = "black",
  theme.basic = "theme_gray",
  axis.title.size = 15,
  axis.text.size = 14,
  legend.title = NULL,
  legend.title.size = NULL,
  legend.text.size = NULL,
  var2nd.series = FALSE,
  grid = TRUE,
  yTicks = TRUE
)
}
\arguments{
\item{data.spectra}{Spectrum data frame/table containing magnetic flux density, \eqn{g}-value
or radio-frequency columns as \code{x} variable. They can be labeled as \code{Field}, \code{B_mT}
in mT (or \code{B_G} in gauss), see also \code{x} parameter/argument. The \code{y/Intensity} variable
can be labeled as \code{dIepr_over_dB}, in case of derivative intensity, or if
integrated or simulated spectra intensities are present, they can be labeled accordingly.
See also \code{Intensity} parameter/argument. For spectral series the second independent variable
\code{var2nd} column (like e.g. \code{var2nd = "time_s"}) must be available. In such case
the entire \code{data.spectra} has to be in form of `tidy` table format (see also parameters/arguments
\code{var2nd} and \code{var2nd.series}).}

\item{x}{Character/String pointing to \code{x}-axis/column quantity in the original \code{data.spectra}
like magnetic flux density \eqn{B}, \eqn{g}-Value or \eqn{RF} (radio frequency),
\strong{default}: \code{x = "B_mT"}.}

\item{x.unit}{Character/String pointing to unit of quantity (coming from original ASCII data, see also
\code{column.names} parameter) which is to be presented on \eqn{x} abscissa of the EPR spectrum,
like \code{"G"} (`Gauss`), \code{"mT"} (`millitesla`), \code{"MHz"} (`megahertz` in case of ENDOR spectra)
or \code{"Unitless"} in case of \eqn{g}-values, \strong{default}: \code{x.unit = "mT"}.}

\item{xlim}{Numeric vector corresponding to border limits of the selected \eqn{x} region,
e.g. like `xlim = c(3495.4,3595.4)` (\eqn{B} in \code{G}) or `xlim = c(12.5,21.2)` (\eqn{RF} in \code{MHz})
or `xlim = c(2.004,2.001)` (\eqn{g} dimensionless). \strong{Default}: \code{xlim = NULL} (corresponding
to entire `x` range)}

\item{var2nd}{String/Character referred to name of the second independent variable/quantity
column in the original \code{data.spectra} (e.g. like `time`,`Temperature`, `Electrochemical Potential`,
`Microwave Power`...etc) altered upon individual experiments as a second variable (\code{var2nd})
and related to spectra/data (see also \code{var2nd.series} parameter/argument). Data must be available
in \strong{long table} (or \strong{tidy}) \strong{format} (see also \code{\link{readEPR_Exp_Specs_multif}}).
\strong{Default}: \code{var2nd = NULL} if \code{var2nd.series = FALSE}. Otherwise \strong{usually}
\code{var2nd = "time_s"} if \code{var2nd.series = TRUE}.}

\item{Intensity}{Character/String pointing to \code{intensity column} in the original \code{data.spectra}
if other than \code{dIepr_over_dB} name/label is used (e.g. for simulated or integrated spectra),
\strong{default}: \code{Intesity = "dIepr_over_dB"}.}

\item{line.colors}{Character string, line color to plot simple EPR spectrum. All \pkg{ggplot2} compatible
colors are allowed, \strong{default}: \code{line.colors = "steelblue"}. In case of \code{var2nd.series = TRUE}
the parameter/argument is identical with the \code{colors} one from \code{\link[ggplot2]{scale_colour_gradientn}}
Following color definitions are allowed =>
\itemize{
  \item an arbitrary vector color like \code{c("blue","green","red")} with the length of \eqn{\geq 1}
  \item any color definition from \pkg{grDevices} like \code{hcl.colors(n,pallete)}, \code{rainbow(n)},
  \code{heat.colors(n)}, \code{terrain.colors(n)}, \code{topo.colors(n)}, code{cm.colors(n)} where the number
  of colors \eqn{n \geq 1} should be specified.
  See also \href{https://www.rdocumentation.org/packages/grDevices/versions/3.6.2/topics/Palettes}{grDevices Palettes}
  and \href{https://developer.r-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/}{HCL Color Palettes}
}}

\item{line.width}{Numeric, linewidth of the plot line in \code{pt}, \strong{default}: \code{line.width = 0.75}}

\item{border.line.width}{tbc}

\item{border.line.color}{tbc}

\item{theme.basic}{Character/String, which calls a ggplot theme base. The following ones are defined:
\itemize{
  \item \code{"theme_gray"} (\strong{default} one) => the gray background with white grid lines
  \item \code{"theme_bw"} => the white background with thin gray grid lines
  \item \code{"theme_light"} => similar to \code{theme_bw()} but without the pronounced axis black lines
  \item \code{"theme_classic"} => without grid, pronounced axis lines, however no opposite ones
  \item \code{"theme_linedraw"} => pronounced axis lines (both for origin and opposite) as well as the grid-lines,
  theme is proposed \strong{for publications} (if the \code{grid} is set to \code{FALSE})
}}

\item{axis.title.size}{Numeric, text size (in \code{pt}) for the axes title,
\strong{default}: \code{axis.title.size = 15}}

\item{axis.text.size}{Numeric, text size (in \code{pt}) for the axes units/descriptions,
\strong{default}: \code{axis.text.size = 14}}

\item{legend.title}{Character string tbc}

\item{legend.title.size}{tbc}

\item{legend.text.size}{description}

\item{var2nd.series}{Logical, whether the input ASCII spectrum data comes from the series of experiments
each corresponding to alteration of a second variable (usually like time series, see also parameter \code{var2nd})
where the ASCII data are in the long table/tidy format (e.g. for time series => 3 columns like "B_mT","time_s"
and "Intensity" must be supplied). \strong{Deffault}: \code{var2nd.series = FALSE}.}

\item{grid}{Logical, whether to dislay the \code{grid} within the plot/graph, \strong{default}: \code{grid = TRUE}}

\item{yTicks}{Logical, whether to display the \code{y} (\code{dIepr_over_dB}) ticks and the corresponding text
(not the axis title!), which is usually skipped in the EPR community, \strong{default}: \code{yTicks = TRUE}}
}
\value{
EPR spectrum/spectra ('overlay' plot) by \pkg{ggplot2} with key parameter
  (e.g. line-color and theme,grid...etc.) variation
}
\description{
Graph/Plot of an EPR/ENDOR spectrum/spectra ('overlay' plot) based on \pkg{ggplot2}-functionality.
  Spectral data are in the form of data frame (details see below).
  Theme of the graphic spectrum representation as well its line colors can be varied like
  in \pkg{ggplot2}. Within a theme \code{y} ticks can be displayed
  or skipped \code{y} (e.g. \code{dIepr_over_dB} in 'procedure defined unit',
  see \href{http://www.iupac.org/divisions/VII/VII.C.1/C-NPU_Uppsala_081023_25_minutes_confirmed.pdf}{p.d.u.}),
  this is common for presenting the EPR spectra. Function can be additionally combined by \code{+} sign
  with other functions (e.g. with \code{\link{plot_theme_In_ticks}}) like in \pkg{ggplot2},
  e.g. present or skip \code{grid} within the code.
}
\examples{
\dontrun{
plot_EPR_Specs(data.spectra)
plot_EPR_Specs(data.spectra,
              x = "B_G",
              x.unit = "G",
              Intensity = "dIepr_over_dB_Sim")
plot_EPR_Specs(data.spectra,
              x = "B_mT_Sim",
              Intensity = "single_Integ")
plot_EPR_Specs(data.spectra,
              x = "Field",
              x.unit = "G",
              var2nd = "time_s",
              line.colors = grDevices::rainbow(6),
              basic.theme = "theme_linedraw",
              legend.title = "Time (s)",
              legend.title.size = 13,
              legend.text.size = 11,
              var2nd.series = TRUE,
              yTicks = FALSE)
plot_EPR_Specs(data.spectra,
              x = "g_Value",
              x.unit = "Unitless",
              theme.basic = "theme_bw",
              grid = TRUE)
plot_EPR_Specs(data.spectra,
              x = "RF_MHz",
              x.unit = "MHz",
              line.colors = "darkred",
              line.width = 1.2)
}


}
